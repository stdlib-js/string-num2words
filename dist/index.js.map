{
  "version": 3,
  "sources": ["../lib/units.json", "../lib/int2words_de.js", "../lib/int2words_en.js", "../lib/validate.js", "../lib/decimals.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["[\n\t{ \"VAL\": 1e0, \"EN\": \"zero\", \"DE\": \"null\" },\n\t{ \"VAL\": 1e1, \"EN\": \"ten\", \"DE\": \"zehn\" },\n\t{ \"VAL\": 1e2, \"EN\": \"hundred\", \"DE\": \"hundert\" },\n\t{ \"VAL\": 1e3, \"EN\": \"thousand\", \"DE\": \"tausend\" },\n\t{ \"VAL\": 1e6, \"EN\": \"million\", \"DE\": \"Million\" },\n\t{ \"VAL\": 1e9, \"EN\": \"billion\", \"DE\": \"Milliarde\" },\n\t{ \"VAL\": 1e12, \"EN\": \"trillion\", \"DE\": \"Billion\" },\n\t{ \"VAL\": 1e15, \"EN\": \"quadrillion\", \"DE\": \"Billiarde\" },\n\t{ \"VAL\": 1e18, \"EN\": \"quintillion\", \"DE\": \"Trillion\" },\n\t{ \"VAL\": 1e21, \"EN\": \"sextillion\", \"DE\": \"Trilliarde\" },\n\t{ \"VAL\": 1e24, \"EN\": \"septillion\", \"DE\": \"Quadrillion\" },\n\t{ \"VAL\": 1e27, \"EN\": \"octillion\", \"DE\": \"Quadrilliarde\" },\n\t{ \"VAL\": 1e30, \"EN\": \"nonillion\", \"DE\": \"Quintillion\" },\n\t{ \"VAL\": 1e33, \"EN\": \"decillion\", \"DE\": \"Quintilliarde\" },\n\t{ \"VAL\": 1e36, \"EN\": \"undecillion\", \"DE\": \"Sextillion\" },\n\t{ \"VAL\": 1e39, \"EN\": \"duodecillion\", \"DE\": \"Sextilliarde\" },\n\t{ \"VAL\": 1e42, \"EN\": \"tredecillion\", \"DE\": \"Septillion\" },\n\t{ \"VAL\": 1e45, \"EN\": \"quattuordecillion\", \"DE\": \"Septilliarde\" },\n\t{ \"VAL\": 1e48, \"EN\": \"quindecillion\", \"DE\": \"Octillion\" },\n\t{ \"VAL\": 1e51, \"EN\": \"sedecillion\", \"DE\": \"Octilliarde\" },\n\t{ \"VAL\": 1e54, \"EN\": \"septendecillion\", \"DE\": \"Nonillion\" },\n\t{ \"VAL\": 1e57, \"EN\": \"octodecillion\", \"DE\": \"Nonilliarde\" },\n\t{ \"VAL\": 1e60, \"EN\": \"novendecillion\", \"DE\": \"Decillion\" },\n\t{ \"VAL\": 1e63, \"EN\": \"vigintillion\", \"DE\": \"Decilliarde\" },\n\t{ \"VAL\": 1e66, \"EN\": \"unvigintillion\", \"DE\": \"Undecillion\" },\n\t{ \"VAL\": 1e69, \"EN\": \"duovigintillion\", \"DE\": \"Undecilliarde\" },\n\t{ \"VAL\": 1e72, \"EN\": \"tresvigintillion\", \"DE\": \"Duodecillion\" },\n\t{ \"VAL\": 1e75, \"EN\": \"quattuorvigintillion\", \"DE\": \"Duodecilliarde\" },\n\t{ \"VAL\": 1e78, \"EN\": \"quinquavigintillion\", \"DE\": \"Tredecillion\" },\n\t{ \"VAL\": 1e81, \"EN\": \"sesvigintillion\", \"DE\": \"Tredecilliarde\" },\n\t{ \"VAL\": 1e84, \"EN\": \"septemvigintillion\", \"DE\": \"Quattuordecillion\" },\n\t{ \"VAL\": 1e87, \"EN\": \"octovigintillion\", \"DE\": \"Quattuordecilliarde\" },\n\t{ \"VAL\": 1e90, \"EN\": \"novemvigintillion\", \"DE\": \"Quindecillion\" },\n\t{ \"VAL\": 1e93, \"EN\": \"trigintillion\", \"DE\": \"Quindecilliarde\" },\n\t{ \"VAL\": 1e96, \"EN\": \"untrigintillion\", \"DE\": \"Sedecillion\" },\n\t{ \"VAL\": 1e99, \"EN\": \"duotrigintillion\", \"DE\": \"Sedecilliarde\" },\n\t{ \"VAL\": 1e102, \"EN\": \"trestrigintillion\", \"DE\": \"Septendecillion\" },\n\t{ \"VAL\": 1e105, \"EN\": \"quattuortrigintillion\", \"DE\": \"Septendecilliarde\" },\n\t{ \"VAL\": 1e108, \"EN\": \"quinquatrigintillion\", \"DE\": \"Octodecillion\" },\n\t{ \"VAL\": 1e111, \"EN\": \"sestrigintillion\", \"DE\": \"Octodecilliarde\" },\n\t{ \"VAL\": 1e114, \"EN\": \"septentrigintillion\", \"DE\": \"Novendecillion\" },\n\t{ \"VAL\": 1e117, \"EN\": \"octotrigintillion\", \"DE\": \"Novendecilliarde\" },\n\t{ \"VAL\": 1e120, \"EN\": \"noventrigintillion\", \"DE\": \"Vigintillion\" },\n\t{ \"VAL\": 1e123, \"EN\": \"quadragintillion\", \"DE\": \"Vigintilliarde\" },\n\t{ \"VAL\": 1e153, \"EN\": \"quinquagintillion\", \"DE\": \"Quinvigintilliarde\" },\n\t{ \"VAL\": 1e183, \"EN\": \"sexagintillion\", \"DE\": \"Trigintilliarde\" },\n\t{ \"VAL\": 1e213, \"EN\": \"septuagintillion\", \"DE\": \"Quintrigintilliarde\" },\n\t{ \"VAL\": 1e243, \"EN\": \"octogintillion\", \"DE\": \"Quadragintilliarde\" },\n\t{ \"VAL\": 1e273, \"EN\": \"nonagintillion\", \"DE\": \"Quin\u00ADquadra\u00ADgint\u00ADilliarde\" },\n\t{ \"VAL\": 1e303, \"EN\": \"centillion\", \"DE\": \"Quinquagintilliarde\" },\n\t{ \"VAL\": 1e306, \"EN\": \"uncentillion\", \"DE\": \"Unquinquagintillione\" }\n]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar endsWith = require( '@stdlib/string-base-ends-with' );\nvar UNITS = require( './units.json' );\n\n\n// VARIABLES //\n\nvar ONES = [ 'null', 'eins', 'zwei', 'drei', 'vier', 'f\u00FCnf', 'sechs', 'sieben', 'acht', 'neun', 'zehn', 'elf', 'zw\u00F6lf', 'dreizehn', 'vierzehn', 'f\u00FCnfzehn', 'sechzehn', 'siebzehn', 'achtzehn', 'neunzehn' ];\nvar TENS = [ 'null', 'zehn', 'zwanzig', 'drei\u00DFig', 'vierzig', 'f\u00FCnfzig', 'sechzig', 'siebzig', 'achtzig', 'neunzig' ];\n\n\n// FUNCTIONS //\n\n/**\n* Pluralizes a word by adding a 'n' or 'en' suffix.\n*\n* @private\n* @param {string} word - word to pluralize\n* @returns {string} pluralized word\n*/\nfunction pluralize( word ) {\n\tif ( endsWith( word, 'e' ) ) {\n\t\treturn word + 'n';\n\t}\n\treturn word + 'en';\n}\n\n\n// MAIN //\n\n/**\n* Converts a number to a word representation in German.\n*\n* @private\n* @param {number} num - number to convert\n* @param {string} out - output string\n* @returns {string} word representation\n*\n* @example\n* var words = int2wordsDE( 1243, '' );\n* // returns 'eintausendzweihundertdreiundvierzig'\n*\n* @example\n* var words = int2wordsDE( 387, '' );\n* // returns 'dreihundertsiebenundachtzig'\n*\n* @example\n* var words = int2wordsDE( 100, '' );\n* // returns 'einhundert'\n*\n* @example\n* var words = int2wordsDE( 1421, '' );\n* // returns 'eintausendvierhunderteinundzwanzig'\n*\n* @example\n* var words = int2wordsDE( 100381, '' );\n* // returns 'einhunderttausenddreihunderteinundachtzig'\n*\n* @example\n* var words = int2wordsDE( -13, '' );\n* // returns 'minus dreizehn'\n*/\nfunction int2wordsDE( num, out ) {\n\tvar word;\n\tvar rem;\n\tvar i;\n\tif ( num === 0 ) {\n\t\t// Case: We have reached the end of the number and the number is zero.\n\t\treturn out || 'null';\n\t}\n\tif ( num < 0 ) {\n\t\tout += 'minus ';\n\t\tnum *= -1;\n\t}\n\tif ( num < 20 ) {\n\t\trem = 0;\n\t\tif ( num === 1 && out.length === 0 ) {\n\t\t\tword = 'ein';\n\t\t} else {\n\t\t\tword = ONES[ num ];\n\t\t}\n\t}\n\telse if ( num < 100 ) {\n\t\trem = num % 10;\n\t\tword = TENS[ floor( num / 10 ) ];\n\t\tif ( rem ) {\n\t\t\tword = ( ( rem === 1 ) ? 'ein' : ONES[ rem ] ) + 'und' + word;\n\t\t\trem = 0;\n\t\t}\n\t}\n\telse if ( num < 1e3 ) {\n\t\trem = num % 100;\n\t\tword = int2wordsDE( floor( num / 100 ), '' ) + 'hundert';\n\t}\n\telse if ( num < 1e6 ) {\n\t\trem = num % 1e3;\n\t\tword = int2wordsDE( floor( num / 1e3 ), '' ) + 'tausend';\n\t}\n\telse {\n\t\tfor ( i = 5; i < UNITS.length; i++ ) {\n\t\t\tif ( num < UNITS[ i ].VAL ) {\n\t\t\t\trem = num % UNITS[ i-1 ].VAL;\n\t\t\t\tif ( floor( num / UNITS[ i-1 ].VAL ) === 1 ) {\n\t\t\t\t\tword = 'eine ' + UNITS[ i-1 ].DE;\n\t\t\t\t} else {\n\t\t\t\t\tword = int2wordsDE( floor( num / UNITS[ i-1 ].VAL ), '' ) + ' ' + pluralize( UNITS[ i-1 ].DE );\n\t\t\t\t}\n\t\t\t\tif ( rem ) {\n\t\t\t\t\tword += ' ';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tout += word;\n\treturn int2wordsDE( rem, out );\n}\n\n\n// EXPORTS //\n\nmodule.exports = int2wordsDE;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar UNITS = require( './units.json' );\n\n\n// VARIABLES //\n\nvar ONES = [ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen' ];\nvar TENS = [ 'zero', 'ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety' ];\n\n\n// MAIN //\n\n/**\n* Converts a number to a word representation in English.\n*\n* @private\n* @param {number} num - number to convert\n* @param {string} out - output string\n* @returns {string} word representation\n*\n* @example\n* var words = int2wordsEN( 1234, '' );\n* // returns 'one thousand two hundred thirty-four'\n*\n* @example\n* var words = int2wordsEN( -129, '' );\n* // returns 'minus one hundred twenty-nine'\n*\n* @example\n* var words = int2wordsEN( 0, '' );\n* // returns 'zero'\n*/\nfunction int2wordsEN( num, out ) {\n\tvar word;\n\tvar rem;\n\tvar i;\n\tif ( num === 0 ) {\n\t\t// Case: We have reached the end of the number and the number is zero.\n\t\treturn out || 'zero';\n\t}\n\tif ( num < 0 ) {\n\t\tout += 'minus';\n\t\tnum *= -1;\n\t}\n\tif ( num < 20 ) {\n\t\trem = 0;\n\t\tword = ONES[ num ];\n\t}\n\telse if ( num < 100 ) {\n\t\trem = num % 10;\n\t\tword = TENS[ floor( num / 10 ) ];\n\t\tif ( rem > 0 ) {\n\t\t\tword += '-' + ONES[ rem ];\n\t\t\trem = 0;\n\t\t}\n\t}\n\telse {\n\t\tfor ( i = 3; i < UNITS.length - 1; i++ ) {\n\t\t\tif ( num < UNITS[ i ].VAL ) {\n\t\t\t\trem = num % UNITS[ i-1 ].VAL;\n\t\t\t\tword = int2wordsEN( floor( num / UNITS[ i-1 ].VAL ), '' ) + ' ' + UNITS[ i-1 ].EN;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( i === UNITS.length - 1 ) {\n\t\t\trem = num % UNITS[ i-1 ].VAL;\n\t\t\tword = int2wordsEN( floor( num / UNITS[ i-1 ].VAL ), '' ) + ' ' + UNITS[ i-1 ].EN;\n\t\t}\n\t}\n\tif ( out.length > 0 ) {\n\t\tout += ' ';\n\t}\n\tout += word;\n\treturn int2wordsEN( rem, out );\n}\n\n\n// EXPORTS //\n\nmodule.exports = int2wordsEN;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar indexOf = require( '@stdlib/utils-index-of' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar LANGUAGE_CODES = [ 'en', 'de' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - options to validate\n* @param {string} [options.lang] - language code\n* @returns {(null|Error)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'lang': 'es'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'lang' ) ) {\n\t\topts.lang = options.lang;\n\t\tif ( indexOf( LANGUAGE_CODES, opts.lang ) === -1 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Value: `%s`.', 'lang', LANGUAGE_CODES.join( '\", \"' ), opts.lang ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Processes a string of decimal numbers and applies a function mapping decimal numbers to words to each character.\n*\n* @private\n* @param {string} x - string of decimal numbers\n* @param {Function} fcn - function mapping decimal numbers to words\n* @returns {string} string of words\n*/\nfunction decimals( x, fcn ) {\n\tvar out;\n\tvar len;\n\tvar i;\n\n\tlen = x.length;\n\tout = '';\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout += fcn( x[ i ], '' );\n\t\tif ( i < len-1 ) {\n\t\t\tout += ' ';\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = decimals;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isfinite = require( '@stdlib/math-base-assert-is-finite' );\nvar format = require( '@stdlib/string-format' );\nvar int2wordsDE = require( './int2words_de.js' );\nvar int2wordsEN = require( './int2words_en.js' );\nvar validate = require( './validate.js' );\nvar decimals = require( './decimals.js' );\n\n\n// MAIN //\n\n/**\n* Converts a number to a word representation.\n*\n* @param {number} num - number to convert\n* @param {Object} [options] - options\n* @param {string} [options.lang='en'] - language code\n* @throws {TypeError} must provide valid options\n* @returns {string} word representation of number\n*\n* @example\n* var out = num2words( 12 );\n* // returns 'twelve'\n*\n* @example\n* var out = num2words( 21.8 );\n* // returns 'twenty-one point eight'\n*\n* @example\n* var out = num2words( 1234 );\n* // returns 'one thousand two hundred thirty-four'\n*\n* @example\n* var out = num2words( 100381 );\n* // returns 'one hundred thousand three hundred eighty-one'\n*/\nfunction num2words( num, options ) {\n\tvar parts;\n\tvar opts;\n\tvar err;\n\n\tif ( !isNumber( num ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number. Value: `%s`.', num ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( isInteger( num ) ) {\n\t\tswitch ( opts.lang ) {\n\t\tcase 'de':\n\t\t\treturn int2wordsDE( num, '' );\n\t\tcase 'en':\n\t\tdefault:\n\t\t\treturn int2wordsEN( num, '' );\n\t\t}\n\t}\n\tif ( !isfinite( num ) ) {\n\t\tswitch ( opts.lang ) {\n\t\tcase 'de':\n\t\t\treturn ( num < 0 ) ? 'minus unendlich' : 'unendlich';\n\t\tcase 'en':\n\t\tdefault:\n\t\t\treturn ( num < 0 ) ? 'negative infinity' : 'infinity';\n\t\t}\n\t}\n\tparts = num.toString().split( '.' );\n\tswitch ( opts.lang ) {\n\tcase 'de':\n\t\treturn int2wordsDE( parts[ 0 ], '' ) + ' Komma ' + decimals( parts[ 1 ], int2wordsDE );\n\tcase 'en':\n\tdefault:\n\t\treturn int2wordsEN( parts[ 0 ], '' ) + ' point ' + decimals( parts[ 1 ], int2wordsEN );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = num2words;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a number to a word representation.\n*\n* @module @stdlib/string-num2words\n*\n* @example\n* var num2words = require( '@stdlib/string-num2words' );\n*\n* var out = num2words( 29 );\n* // returns 'twenty-nine'\n*\n* out = num2words( 13072 );\n* // returns 'thirteen thousand seventy-two'\n*\n* out = num2words( 183, { 'lang': 'de' } );\n* // returns 'einhundertdreiundachtzig'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,CAAAA,EAAA,SACC,CAAE,IAAO,EAAK,GAAM,OAAQ,GAAM,MAAO,EACzC,CAAE,IAAO,GAAK,GAAM,MAAO,GAAM,MAAO,EACxC,CAAE,IAAO,IAAK,GAAM,UAAW,GAAM,SAAU,EAC/C,CAAE,IAAO,IAAK,GAAM,WAAY,GAAM,SAAU,EAChD,CAAE,IAAO,IAAK,GAAM,UAAW,GAAM,SAAU,EAC/C,CAAE,IAAO,IAAK,GAAM,UAAW,GAAM,WAAY,EACjD,CAAE,IAAO,KAAM,GAAM,WAAY,GAAM,SAAU,EACjD,CAAE,IAAO,KAAM,GAAM,cAAe,GAAM,WAAY,EACtD,CAAE,IAAO,KAAM,GAAM,cAAe,GAAM,UAAW,EACrD,CAAE,IAAO,KAAM,GAAM,aAAc,GAAM,YAAa,EACtD,CAAE,IAAO,KAAM,GAAM,aAAc,GAAM,aAAc,EACvD,CAAE,IAAO,KAAM,GAAM,YAAa,GAAM,eAAgB,EACxD,CAAE,IAAO,KAAM,GAAM,YAAa,GAAM,aAAc,EACtD,CAAE,IAAO,KAAM,GAAM,YAAa,GAAM,eAAgB,EACxD,CAAE,IAAO,KAAM,GAAM,cAAe,GAAM,YAAa,EACvD,CAAE,IAAO,KAAM,GAAM,eAAgB,GAAM,cAAe,EAC1D,CAAE,IAAO,KAAM,GAAM,eAAgB,GAAM,YAAa,EACxD,CAAE,IAAO,KAAM,GAAM,oBAAqB,GAAM,cAAe,EAC/D,CAAE,IAAO,KAAM,GAAM,gBAAiB,GAAM,WAAY,EACxD,CAAE,IAAO,KAAM,GAAM,cAAe,GAAM,aAAc,EACxD,CAAE,IAAO,KAAM,GAAM,kBAAmB,GAAM,WAAY,EAC1D,CAAE,IAAO,KAAM,GAAM,gBAAiB,GAAM,aAAc,EAC1D,CAAE,IAAO,KAAM,GAAM,iBAAkB,GAAM,WAAY,EACzD,CAAE,IAAO,KAAM,GAAM,eAAgB,GAAM,aAAc,EACzD,CAAE,IAAO,KAAM,GAAM,iBAAkB,GAAM,aAAc,EAC3D,CAAE,IAAO,KAAM,GAAM,kBAAmB,GAAM,eAAgB,EAC9D,CAAE,IAAO,KAAM,GAAM,mBAAoB,GAAM,cAAe,EAC9D,CAAE,IAAO,KAAM,GAAM,uBAAwB,GAAM,gBAAiB,EACpE,CAAE,IAAO,KAAM,GAAM,sBAAuB,GAAM,cAAe,EACjE,CAAE,IAAO,KAAM,GAAM,kBAAmB,GAAM,gBAAiB,EAC/D,CAAE,IAAO,KAAM,GAAM,qBAAsB,GAAM,mBAAoB,EACrE,CAAE,IAAO,KAAM,GAAM,mBAAoB,GAAM,qBAAsB,EACrE,CAAE,IAAO,KAAM,GAAM,oBAAqB,GAAM,eAAgB,EAChE,CAAE,IAAO,KAAM,GAAM,gBAAiB,GAAM,iBAAkB,EAC9D,CAAE,IAAO,KAAM,GAAM,kBAAmB,GAAM,aAAc,EAC5D,CAAE,IAAO,KAAM,GAAM,mBAAoB,GAAM,eAAgB,EAC/D,CAAE,IAAO,MAAO,GAAM,oBAAqB,GAAM,iBAAkB,EACnE,CAAE,IAAO,MAAO,GAAM,wBAAyB,GAAM,mBAAoB,EACzE,CAAE,IAAO,MAAO,GAAM,uBAAwB,GAAM,eAAgB,EACpE,CAAE,IAAO,MAAO,GAAM,mBAAoB,GAAM,iBAAkB,EAClE,CAAE,IAAO,MAAO,GAAM,sBAAuB,GAAM,gBAAiB,EACpE,CAAE,IAAO,MAAO,GAAM,oBAAqB,GAAM,kBAAmB,EACpE,CAAE,IAAO,MAAO,GAAM,qBAAsB,GAAM,cAAe,EACjE,CAAE,IAAO,MAAO,GAAM,mBAAoB,GAAM,gBAAiB,EACjE,CAAE,IAAO,MAAO,GAAM,oBAAqB,GAAM,oBAAqB,EACtE,CAAE,IAAO,MAAO,GAAM,iBAAkB,GAAM,iBAAkB,EAChE,CAAE,IAAO,MAAO,GAAM,mBAAoB,GAAM,qBAAsB,EACtE,CAAE,IAAO,MAAO,GAAM,iBAAkB,GAAM,oBAAqB,EACnE,CAAE,IAAO,MAAO,GAAM,iBAAkB,GAAM,oCAA4B,EAC1E,CAAE,IAAO,MAAO,GAAM,aAAc,GAAM,qBAAsB,EAChE,CAAE,IAAO,MAAO,GAAM,eAAgB,GAAM,sBAAuB,CACpE,ICpDA,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAW,QAAS,+BAAgC,EACpDC,EAAQ,IAKRC,EAAO,CAAE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,UAAQ,QAAS,SAAU,OAAQ,OAAQ,OAAQ,MAAO,WAAS,WAAY,WAAY,cAAY,WAAY,WAAY,WAAY,UAAW,EACvMC,EAAO,CAAE,OAAQ,OAAQ,UAAW,aAAW,UAAW,aAAW,UAAW,UAAW,UAAW,SAAU,EAYpH,SAASC,EAAWC,EAAO,CAC1B,OAAKL,EAAUK,EAAM,GAAI,EACjBA,EAAO,IAERA,EAAO,IACf,CAqCA,SAASC,EAAaC,EAAKC,EAAM,CAChC,IAAIH,EACAI,EACAC,EACJ,GAAKH,IAAQ,EAEZ,OAAOC,GAAO,OAMf,GAJKD,EAAM,IACVC,GAAO,SACPD,GAAO,IAEHA,EAAM,GACVE,EAAM,EACDF,IAAQ,GAAKC,EAAI,SAAW,EAChCH,EAAO,MAEPA,EAAOH,EAAMK,CAAI,UAGTA,EAAM,IACfE,EAAMF,EAAM,GACZF,EAAOF,EAAMJ,EAAOQ,EAAM,EAAG,CAAE,EAC1BE,IACJJ,GAAWI,IAAQ,EAAM,MAAQP,EAAMO,CAAI,GAAM,MAAQJ,EACzDI,EAAM,WAGEF,EAAM,IACfE,EAAMF,EAAM,IACZF,EAAOC,EAAaP,EAAOQ,EAAM,GAAI,EAAG,EAAG,EAAI,kBAEtCA,EAAM,IACfE,EAAMF,EAAM,IACZF,EAAOC,EAAaP,EAAOQ,EAAM,GAAI,EAAG,EAAG,EAAI,cAG/C,KAAMG,EAAI,EAAGA,EAAIT,EAAM,OAAQS,IAC9B,GAAKH,EAAMN,EAAOS,CAAE,EAAE,IAAM,CAC3BD,EAAMF,EAAMN,EAAOS,EAAE,CAAE,EAAE,IACpBX,EAAOQ,EAAMN,EAAOS,EAAE,CAAE,EAAE,GAAI,IAAM,EACxCL,EAAO,QAAUJ,EAAOS,EAAE,CAAE,EAAE,GAE9BL,EAAOC,EAAaP,EAAOQ,EAAMN,EAAOS,EAAE,CAAE,EAAE,GAAI,EAAG,EAAG,EAAI,IAAMN,EAAWH,EAAOS,EAAE,CAAE,EAAE,EAAG,EAEzFD,IACJJ,GAAQ,KAET,KACD,CAGF,OAAAG,GAAOH,EACAC,EAAaG,EAAKD,CAAI,CAC9B,CAKAV,EAAO,QAAUQ,IC/IjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAQ,IAKRC,EAAO,CAAE,OAAQ,MAAO,MAAO,QAAS,OAAQ,OAAQ,MAAO,QAAS,QAAS,OAAQ,MAAO,SAAU,SAAU,WAAY,WAAY,UAAW,UAAW,YAAa,WAAY,UAAW,EACtMC,EAAO,CAAE,OAAQ,MAAO,SAAU,SAAU,QAAS,QAAS,QAAS,UAAW,SAAU,QAAS,EAyBzG,SAASC,EAAaC,EAAKC,EAAM,CAChC,IAAIC,EACAC,EACAC,EACJ,GAAKJ,IAAQ,EAEZ,OAAOC,GAAO,OAMf,GAJKD,EAAM,IACVC,GAAO,QACPD,GAAO,IAEHA,EAAM,GACVG,EAAM,EACND,EAAOL,EAAMG,CAAI,UAERA,EAAM,IACfG,EAAMH,EAAM,GACZE,EAAOJ,EAAMH,EAAOK,EAAM,EAAG,CAAE,EAC1BG,EAAM,IACVD,GAAQ,IAAML,EAAMM,CAAI,EACxBA,EAAM,OAGH,CACJ,IAAMC,EAAI,EAAGA,EAAIR,EAAM,OAAS,EAAGQ,IAClC,GAAKJ,EAAMJ,EAAOQ,CAAE,EAAE,IAAM,CAC3BD,EAAMH,EAAMJ,EAAOQ,EAAE,CAAE,EAAE,IACzBF,EAAOH,EAAaJ,EAAOK,EAAMJ,EAAOQ,EAAE,CAAE,EAAE,GAAI,EAAG,EAAG,EAAI,IAAMR,EAAOQ,EAAE,CAAE,EAAE,GAC/E,KACD,CAEIA,IAAMR,EAAM,OAAS,IACzBO,EAAMH,EAAMJ,EAAOQ,EAAE,CAAE,EAAE,IACzBF,EAAOH,EAAaJ,EAAOK,EAAMJ,EAAOQ,EAAE,CAAE,EAAE,GAAI,EAAG,EAAG,EAAI,IAAMR,EAAOQ,EAAE,CAAE,EAAE,GAEjF,CACA,OAAKH,EAAI,OAAS,IACjBA,GAAO,KAERA,GAAOC,EACAH,EAAaI,EAAKF,CAAI,CAC9B,CAKAP,EAAO,QAAUK,ICrGjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAa,QAAS,iCAAkC,EACxDC,EAAU,QAAS,wBAAyB,EAC5CC,EAAS,QAAS,uBAAwB,EAK1CC,EAAiB,CAAE,KAAM,IAAK,EAwBlC,SAASC,EAAUC,EAAMC,EAAU,CAClC,OAAMP,EAAeO,CAAQ,EAGxBN,EAAYM,EAAS,MAAO,IAChCD,EAAK,KAAOC,EAAQ,KACfL,EAASE,EAAgBE,EAAK,IAAK,IAAM,IACtC,IAAI,UAAWH,EAAQ,+EAAgF,OAAQC,EAAe,KAAM,MAAO,EAAGE,EAAK,IAAK,CAAE,EAG5J,KARC,IAAI,UAAWH,EAAQ,qEAAsEI,CAAQ,CAAE,CAShH,CAKAR,EAAO,QAAUM,ICtEjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cA8BA,SAASC,EAAUC,EAAGC,EAAM,CAC3B,IAAIC,EACAC,EACAC,EAIJ,IAFAD,EAAMH,EAAE,OACRE,EAAM,GACAE,EAAI,EAAGA,EAAID,EAAKC,IACrBF,GAAOD,EAAKD,EAAGI,CAAE,EAAG,EAAG,EAClBA,EAAID,EAAI,IACZD,GAAO,KAGT,OAAOA,CACR,CAKAJ,EAAO,QAAUC,ICjDjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAW,QAAS,oCAAqC,EACzDC,EAAS,QAAS,uBAAwB,EAC1CC,EAAc,IACdC,EAAc,IACdC,EAAW,IACXC,EAAW,IA8Bf,SAASC,EAAWC,EAAKC,EAAU,CAClC,IAAIC,EACAC,EACAC,EAEJ,GAAK,CAACb,EAAUS,CAAI,EACnB,MAAM,IAAI,UAAWN,EAAQ,kEAAmEM,CAAI,CAAE,EAGvG,GADAG,EAAO,CAAC,EACH,UAAU,OAAS,IACvBC,EAAMP,EAAUM,EAAMF,CAAQ,EACzBG,GACJ,MAAMA,EAGR,GAAKZ,EAAWQ,CAAI,EACnB,OAASG,EAAK,KAAO,CACrB,IAAK,KACJ,OAAOR,EAAaK,EAAK,EAAG,EAC7B,IAAK,KACL,QACC,OAAOJ,EAAaI,EAAK,EAAG,CAC7B,CAED,GAAK,CAACP,EAAUO,CAAI,EACnB,OAASG,EAAK,KAAO,CACrB,IAAK,KACJ,OAASH,EAAM,EAAM,kBAAoB,YAC1C,IAAK,KACL,QACC,OAASA,EAAM,EAAM,oBAAsB,UAC5C,CAGD,OADAE,EAAQF,EAAI,SAAS,EAAE,MAAO,GAAI,EACzBG,EAAK,KAAO,CACrB,IAAK,KACJ,OAAOR,EAAaO,EAAO,CAAE,EAAG,EAAG,EAAI,UAAYJ,EAAUI,EAAO,CAAE,EAAGP,CAAY,EACtF,IAAK,KACL,QACC,OAAOC,EAAaM,EAAO,CAAE,EAAG,EAAG,EAAI,UAAYJ,EAAUI,EAAO,CAAE,EAAGN,CAAY,CACtF,CACD,CAKAN,EAAO,QAAUS,ICjEjB,IAAIM,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_units", "__commonJSMin", "exports", "module", "require_int2words_de", "__commonJSMin", "exports", "module", "floor", "endsWith", "UNITS", "ONES", "TENS", "pluralize", "word", "int2wordsDE", "num", "out", "rem", "i", "require_int2words_en", "__commonJSMin", "exports", "module", "floor", "UNITS", "ONES", "TENS", "int2wordsEN", "num", "out", "word", "rem", "i", "require_validate", "__commonJSMin", "exports", "module", "isPlainObject", "hasOwnProp", "indexOf", "format", "LANGUAGE_CODES", "validate", "opts", "options", "require_decimals", "__commonJSMin", "exports", "module", "decimals", "x", "fcn", "out", "len", "i", "require_main", "__commonJSMin", "exports", "module", "isNumber", "isInteger", "isfinite", "format", "int2wordsDE", "int2wordsEN", "validate", "decimals", "num2words", "num", "options", "parts", "opts", "err", "main"]
}
