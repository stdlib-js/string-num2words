{"version":3,"file":"index.mjs","sources":["../lib/int2words_de.js","../lib/int2words_en.js","../lib/validate.js","../lib/decimals.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport endsWith from '@stdlib/string-base-ends-with';\nimport UNITS from './units.json';\n\n\n// VARIABLES //\n\nvar ONES = [ 'null', 'eins', 'zwei', 'drei', 'vier', 'fünf', 'sechs', 'sieben', 'acht', 'neun', 'zehn', 'elf', 'zwölf', 'dreizehn', 'vierzehn', 'fünfzehn', 'sechzehn', 'siebzehn', 'achtzehn', 'neunzehn' ];\nvar TENS = [ 'null', 'zehn', 'zwanzig', 'dreißig', 'vierzig', 'fünfzig', 'sechzig', 'siebzig', 'achtzig', 'neunzig' ];\n\n\n// FUNCTIONS //\n\n/**\n* Pluralizes a word by adding a 'n' or 'en' suffix.\n*\n* @private\n* @param {string} word - word to pluralize\n* @returns {string} pluralized word\n*/\nfunction pluralize( word ) {\n\tif ( endsWith( word, 'e' ) ) {\n\t\treturn word + 'n';\n\t}\n\treturn word + 'en';\n}\n\n\n// MAIN //\n\n/**\n* Converts a number to a word representation in German.\n*\n* @private\n* @param {number} num - number to convert\n* @param {string} out - output string\n* @returns {string} word representation\n*\n* @example\n* var words = int2wordsDE( 1243, '' );\n* // returns 'eintausendzweihundertdreiundvierzig'\n*\n* @example\n* var words = int2wordsDE( 387, '' );\n* // returns 'dreihundertsiebenundachtzig'\n*\n* @example\n* var words = int2wordsDE( 100, '' );\n* // returns 'einhundert'\n*\n* @example\n* var words = int2wordsDE( 1421, '' );\n* // returns 'eintausendvierhunderteinundzwanzig'\n*\n* @example\n* var words = int2wordsDE( 100381, '' );\n* // returns 'einhunderttausenddreihunderteinundachtzig'\n*\n* @example\n* var words = int2wordsDE( -13, '' );\n* // returns 'minus dreizehn'\n*/\nfunction int2wordsDE( num, out ) {\n\tvar word;\n\tvar rem;\n\tvar i;\n\tif ( num === 0 ) {\n\t\t// Case: We have reached the end of the number and the number is zero.\n\t\treturn out || 'null';\n\t}\n\tif ( num < 0 ) {\n\t\tout += 'minus ';\n\t\tnum *= -1;\n\t}\n\tif ( num < 20 ) {\n\t\trem = 0;\n\t\tif ( num === 1 && out.length === 0 ) {\n\t\t\tword = 'ein';\n\t\t} else {\n\t\t\tword = ONES[ num ];\n\t\t}\n\t}\n\telse if ( num < 100 ) {\n\t\trem = num % 10;\n\t\tword = TENS[ floor( num / 10 ) ];\n\t\tif ( rem ) {\n\t\t\tword = ( ( rem === 1 ) ? 'ein' : ONES[ rem ] ) + 'und' + word;\n\t\t\trem = 0;\n\t\t}\n\t}\n\telse if ( num < 1e3 ) {\n\t\trem = num % 100;\n\t\tword = int2wordsDE( floor( num / 100 ), '' ) + 'hundert';\n\t}\n\telse if ( num < 1e6 ) {\n\t\trem = num % 1e3;\n\t\tword = int2wordsDE( floor( num / 1e3 ), '' ) + 'tausend';\n\t}\n\telse {\n\t\tfor ( i = 5; i < UNITS.length; i++ ) {\n\t\t\tif ( num < UNITS[ i ].VAL ) {\n\t\t\t\trem = num % UNITS[ i-1 ].VAL;\n\t\t\t\tif ( floor( num / UNITS[ i-1 ].VAL ) === 1 ) {\n\t\t\t\t\tword = 'eine ' + UNITS[ i-1 ].DE;\n\t\t\t\t} else {\n\t\t\t\t\tword = int2wordsDE( floor( num / UNITS[ i-1 ].VAL ), '' ) + ' ' + pluralize( UNITS[ i-1 ].DE );\n\t\t\t\t}\n\t\t\t\tif ( rem ) {\n\t\t\t\t\tword += ' ';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tout += word;\n\treturn int2wordsDE( rem, out );\n}\n\n\n// EXPORTS //\n\nexport default int2wordsDE;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport UNITS from './units.json';\n\n\n// VARIABLES //\n\nvar ONES = [ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen' ];\nvar TENS = [ 'zero', 'ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety' ];\n\n\n// MAIN //\n\n/**\n* Converts a number to a word representation in English.\n*\n* @private\n* @param {number} num - number to convert\n* @param {string} out - output string\n* @returns {string} word representation\n*\n* @example\n* var words = int2wordsEN( 1234, '' );\n* // returns 'one thousand two hundred thirty-four'\n*\n* @example\n* var words = int2wordsEN( -129, '' );\n* // returns 'minus one hundred twenty-nine'\n*\n* @example\n* var words = int2wordsEN( 0, '' );\n* // returns 'zero'\n*/\nfunction int2wordsEN( num, out ) {\n\tvar word;\n\tvar rem;\n\tvar i;\n\tif ( num === 0 ) {\n\t\t// Case: We have reached the end of the number and the number is zero.\n\t\treturn out || 'zero';\n\t}\n\tif ( num < 0 ) {\n\t\tout += 'minus';\n\t\tnum *= -1;\n\t}\n\tif ( num < 20 ) {\n\t\trem = 0;\n\t\tword = ONES[ num ];\n\t}\n\telse if ( num < 100 ) {\n\t\trem = num % 10;\n\t\tword = TENS[ floor( num / 10 ) ];\n\t\tif ( rem > 0 ) {\n\t\t\tword += '-' + ONES[ rem ];\n\t\t\trem = 0;\n\t\t}\n\t}\n\telse {\n\t\tfor ( i = 3; i < UNITS.length - 1; i++ ) {\n\t\t\tif ( num < UNITS[ i ].VAL ) {\n\t\t\t\trem = num % UNITS[ i-1 ].VAL;\n\t\t\t\tword = int2wordsEN( floor( num / UNITS[ i-1 ].VAL ), '' ) + ' ' + UNITS[ i-1 ].EN;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( i === UNITS.length - 1 ) {\n\t\t\trem = num % UNITS[ i-1 ].VAL;\n\t\t\tword = int2wordsEN( floor( num / UNITS[ i-1 ].VAL ), '' ) + ' ' + UNITS[ i-1 ].EN;\n\t\t}\n\t}\n\tif ( out.length > 0 ) {\n\t\tout += ' ';\n\t}\n\tout += word;\n\treturn int2wordsEN( rem, out );\n}\n\n\n// EXPORTS //\n\nexport default int2wordsEN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport indexOf from '@stdlib/utils-index-of';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar LANGUAGE_CODES = [ 'en', 'de' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - options to validate\n* @param {string} [options.lang] - language code\n* @returns {(null|Error)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'lang': 'es'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'null2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'lang' ) ) {\n\t\topts.lang = options.lang;\n\t\tif ( indexOf( LANGUAGE_CODES, opts.lang ) === -1 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Value: `%s`.', 'lang', LANGUAGE_CODES.join( '\", \"' ), opts.lang ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Processes a string of decimal numbers and applies a function mapping decimal numbers to words to each character.\n*\n* @private\n* @param {string} x - string of decimal numbers\n* @param {Function} fcn - function mapping decimal numbers to words\n* @returns {string} string of words\n*/\nfunction decimals( x, fcn ) {\n\tvar out;\n\tvar len;\n\tvar i;\n\n\tlen = x.length;\n\tout = '';\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout += fcn( x[ i ], '' );\n\t\tif ( i < len-1 ) {\n\t\t\tout += ' ';\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default decimals;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isfinite from '@stdlib/math-base-assert-is-finite';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport int2wordsDE from './int2words_de.js';\nimport int2wordsEN from './int2words_en.js';\nimport validate from './validate.js';\nimport decimals from './decimals.js';\n\n\n// MAIN //\n\n/**\n* Converts a number to a word representation.\n*\n* @param {number} num - number to convert\n* @param {Object} [options] - options\n* @param {string} [options.lang='en'] - language code\n* @throws {TypeError} must provide valid options\n* @returns {string} word representation of number\n*\n* @example\n* var out = num2words( 12 );\n* // returns 'twelve'\n*\n* @example\n* var out = num2words( 21.8 );\n* // returns 'twenty-one point eight'\n*\n* @example\n* var out = num2words( 1234 );\n* // returns 'one thousand two hundred thirty-four'\n*\n* @example\n* var out = num2words( 100381 );\n* // returns 'one hundred thousand three hundred eighty-one'\n*/\nfunction num2words( num, options ) {\n\tvar parts;\n\tvar opts;\n\tvar err;\n\n\tif ( !isNumber( num ) ) {\n\t\tthrow new TypeError( format( 'null4M', num ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( isInteger( num ) ) {\n\t\tswitch ( opts.lang ) {\n\t\tcase 'de':\n\t\t\treturn int2wordsDE( num, '' );\n\t\tcase 'en':\n\t\tdefault:\n\t\t\treturn int2wordsEN( num, '' );\n\t\t}\n\t}\n\tif ( !isfinite( num ) ) {\n\t\tswitch ( opts.lang ) {\n\t\tcase 'de':\n\t\t\treturn ( num < 0 ) ? 'minus unendlich' : 'unendlich';\n\t\tcase 'en':\n\t\tdefault:\n\t\t\treturn ( num < 0 ) ? 'negative infinity' : 'infinity';\n\t\t}\n\t}\n\tparts = num.toString().split( '.' );\n\tswitch ( opts.lang ) {\n\tcase 'de':\n\t\treturn int2wordsDE( parts[ 0 ], '' ) + ' Komma ' + decimals( parts[ 1 ], int2wordsDE );\n\tcase 'en':\n\tdefault:\n\t\treturn int2wordsEN( parts[ 0 ], '' ) + ' point ' + decimals( parts[ 1 ], int2wordsEN );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default num2words;\n"],"names":["ONES","TENS","pluralize","word","endsWith","int2wordsDE","num","out","rem","i","length","floor","UNITS","VAL","DE","int2wordsEN","EN","LANGUAGE_CODES","validate","opts","options","isPlainObject","hasOwnProp","lang","indexOf","TypeError","format","join","decimals","x","fcn","len","num2words","parts","err","isNumber","arguments","isInteger","isfinite","toString","split"],"mappings":"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"}